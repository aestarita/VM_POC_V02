{"id":"node_modules/@snap/camera-kit/lib/dependency-injection/Injectable.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\dependency-injection\\Injectable.js.map","includedInParent":true,"mtime":1689894620938},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Injectable = Injectable;\nfunction Injectable(token, dependenciesOrFn, maybeFn) {\n  const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];\n  const fn = typeof dependenciesOrFn === \"function\" ? dependenciesOrFn : maybeFn;\n  if (!fn) {\n    throw new TypeError(\"[Factory] Received invalid arguments. The factory function must be either the second \" + \"or third argument.\");\n  }\n  if (fn.length !== dependencies.length) {\n    throw new TypeError(\"[Factory] Function arity does not match the number of dependencies. Function has arity \" + `${fn.length}, but ${dependencies.length} dependencies were specified.` + `\\nDependencies: ${JSON.stringify(dependencies)}`);\n  }\n  const factory = (...args) => fn(...args);\n  factory.token = token;\n  factory.dependencies = dependencies;\n  return factory;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":7,"column":0}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":7,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":60,"column":26},"generated":{"line":7,"column":19}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":7,"column":20}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":7,"column":25}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":7,"column":27}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":62,"column":54},"generated":{"line":7,"column":43}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":7,"column":45}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":7,"column":52}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":7,"column":54}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":4},"generated":{"line":8,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":8,"column":8}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":22},"generated":{"line":8,"column":20}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":35},"generated":{"line":8,"column":23}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":40},"generated":{"line":8,"column":28}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":41},"generated":{"line":8,"column":29}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":48},"generated":{"line":8,"column":36}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":49},"generated":{"line":8,"column":37}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":65},"generated":{"line":8,"column":53}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":66},"generated":{"line":8,"column":54}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":69},"generated":{"line":8,"column":57}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":85},"generated":{"line":8,"column":73}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":88},"generated":{"line":8,"column":76}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":65,"column":90},"generated":{"line":8,"column":78}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":9,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":10},"generated":{"line":9,"column":8}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":12},"generated":{"line":9,"column":10}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":15},"generated":{"line":9,"column":13}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":22},"generated":{"line":9,"column":20}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":38},"generated":{"line":9,"column":36}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":43},"generated":{"line":9,"column":41}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":53},"generated":{"line":9,"column":51}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":56},"generated":{"line":9,"column":54}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":72},"generated":{"line":9,"column":70}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":75},"generated":{"line":9,"column":73}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":66,"column":82},"generated":{"line":9,"column":80}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":68,"column":4},"generated":{"line":10,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":68,"column":8},"generated":{"line":10,"column":6}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":68,"column":9},"generated":{"line":10,"column":7}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":68,"column":11},"generated":{"line":10,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":68,"column":13},"generated":{"line":10,"column":11}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":69,"column":8},"generated":{"line":11,"column":4}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":69,"column":14},"generated":{"line":11,"column":10}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":69,"column":18},"generated":{"line":11,"column":14}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":69,"column":27},"generated":{"line":11,"column":23}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":70,"column":12},"generated":{"line":11,"column":24}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":70,"column":99},"generated":{"line":11,"column":111}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":71,"column":16},"generated":{"line":11,"column":114}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":71,"column":36},"generated":{"line":11,"column":134}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":72,"column":9},"generated":{"line":11,"column":135}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":4},"generated":{"line":13,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":8},"generated":{"line":13,"column":6}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":10},"generated":{"line":13,"column":8}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":11},"generated":{"line":13,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":17},"generated":{"line":13,"column":15}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":22},"generated":{"line":13,"column":20}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":34},"generated":{"line":13,"column":32}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":35},"generated":{"line":13,"column":33}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":41},"generated":{"line":13,"column":39}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":75,"column":43},"generated":{"line":13,"column":41}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":76,"column":8},"generated":{"line":14,"column":4}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":76,"column":14},"generated":{"line":14,"column":10}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":76,"column":18},"generated":{"line":14,"column":14}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":76,"column":27},"generated":{"line":14,"column":23}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":77,"column":12},"generated":{"line":14,"column":24}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":77,"column":101},"generated":{"line":14,"column":113}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":16},"generated":{"line":14,"column":116}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":19},"generated":{"line":14,"column":119}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":21},"generated":{"line":14,"column":121}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":22},"generated":{"line":14,"column":122}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":28},"generated":{"line":14,"column":128}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":37},"generated":{"line":14,"column":137}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":49},"generated":{"line":14,"column":149}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":50},"generated":{"line":14,"column":150}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":56},"generated":{"line":14,"column":156}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":78,"column":87},"generated":{"line":14,"column":187}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":16},"generated":{"line":14,"column":190}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":35},"generated":{"line":14,"column":209}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":39},"generated":{"line":14,"column":213}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":40},"generated":{"line":14,"column":214}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":49},"generated":{"line":14,"column":223}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":50},"generated":{"line":14,"column":224}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":62},"generated":{"line":14,"column":236}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":63},"generated":{"line":14,"column":237}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":79,"column":65},"generated":{"line":14,"column":239}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":80,"column":9},"generated":{"line":14,"column":240}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":4},"generated":{"line":16,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":10},"generated":{"line":16,"column":8}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":17},"generated":{"line":16,"column":15}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":20},"generated":{"line":16,"column":18}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":21},"generated":{"line":16,"column":19}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":24},"generated":{"line":16,"column":22}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":35},"generated":{"line":16,"column":26}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":40},"generated":{"line":16,"column":31}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":42},"generated":{"line":16,"column":33}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":43},"generated":{"line":16,"column":34}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":46},"generated":{"line":16,"column":37}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":50},"generated":{"line":16,"column":41}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":83,"column":51},"generated":{"line":16,"column":42}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":4},"generated":{"line":17,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":11},"generated":{"line":17,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":12},"generated":{"line":17,"column":10}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":17},"generated":{"line":17,"column":15}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":20},"generated":{"line":17,"column":18}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":84,"column":25},"generated":{"line":17,"column":23}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":4},"generated":{"line":18,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":11},"generated":{"line":18,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":12},"generated":{"line":18,"column":10}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":24},"generated":{"line":18,"column":22}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":27},"generated":{"line":18,"column":25}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":85,"column":39},"generated":{"line":18,"column":37}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":86,"column":4},"generated":{"line":19,"column":2}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":86,"column":11},"generated":{"line":19,"column":9}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":86,"column":18},"generated":{"line":19,"column":16}},{"source":"../../src/dependency-injection/Injectable.ts","name":null,"original":{"line":87,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../../src/dependency-injection/Injectable.ts":"import { InjectableFunction, ServicesFromTokenizedParams } from \"./types\";\n\n/**\n * Create an Injectable function with no dependencies (i.e. arguments).\n *\n * Ex:\n * ```ts\n * const createMyService = Factory(\n *   'MyService',\n *   () => { ... },\n * )\n * ```\n *\n * @param token A unique string Token which will correspond to the created Service.\n * @param fn A function with no arguments which returns the Service.\n */\nexport function Injectable<Token extends string, Service>(\n    token: Token,\n    fn: () => Service\n): InjectableFunction<any, [], Token, Service>;\n\n/**\n * Create an Injectable function with dependencies (i.e. arguments).\n *\n * **Note:** the list of dependencies must be readonly – that is, a literal tuple marked `as const`. This tuple must\n * contain only string literals or string consts.\n *\n * Ex:\n * ```ts\n * const DependencyB = 'DependencyB'\n * const createMyService = Factory(\n *   'MyService',\n *   ['DependencyA', DependencyB] as const,\n *   (a: A, b: B) => { ... },\n * )\n * ```\n *\n * @param token A unique string Token which will correspond to the created Service.\n * @param dependencies A *readonly* list of Tokens corresponding to dependencies (i.e. arguments to the Factory), which\n * will be resolved by the Container to which this Factory is provided.\n * @param fn A function with arguments matching in type and length to the given list of dependencies. When called, it\n * must return the Service.\n */\nexport function Injectable<\n    Token extends string,\n    Tokens extends readonly string[],\n    Params extends readonly any[],\n    Service\n>(\n    token: Token,\n    dependencies: Tokens,\n    // The function arity (number of arguments) must match the number of dependencies specified – if they don't, we'll\n    // force a compiler error by saying the arguments should be `void[]`. We'll also throw at runtime, so the return\n    // type will be `never`.\n    fn: (...args: Tokens[\"length\"] extends Params[\"length\"] ? Params : void[]) => Service\n): Tokens[\"length\"] extends Params[\"length\"]\n    ? InjectableFunction<ServicesFromTokenizedParams<Tokens, Params>, Tokens, Token, Service>\n    : never;\n\nexport function Injectable(\n    token: string,\n    dependenciesOrFn?: readonly string[] | (() => any),\n    maybeFn?: (...args: any[]) => any\n): InjectableFunction<any, readonly string[], string, any> {\n    const dependencies: string[] = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];\n    const fn = typeof dependenciesOrFn === \"function\" ? dependenciesOrFn : maybeFn;\n\n    if (!fn) {\n        throw new TypeError(\n            \"[Factory] Received invalid arguments. The factory function must be either the second \" +\n                \"or third argument.\"\n        );\n    }\n\n    if (fn.length !== dependencies.length) {\n        throw new TypeError(\n            \"[Factory] Function arity does not match the number of dependencies. Function has arity \" +\n                `${fn.length}, but ${dependencies.length} dependencies were specified.` +\n                `\\nDependencies: ${JSON.stringify(dependencies)}`\n        );\n    }\n\n    const factory = (...args: any[]) => fn(...args);\n    factory.token = token;\n    factory.dependencies = dependencies;\n    return factory;\n}\n"},"lineCount":null}},"error":null,"hash":"04c79161911fcbc7734a897bf6ad2718","cacheData":{"env":{}}}