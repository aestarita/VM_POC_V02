{"id":"node_modules/@snap/state-management/dist/states.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\state-management\\package.json","includedInParent":true,"mtime":1689894620419},{"name":"rxjs","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\state-management\\dist\\states.js","resolved":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\rxjs\\dist\\esm5\\index.js"},{"name":"./actions","loc":{"line":2,"column":44,"index":75},"parent":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\state-management\\dist\\states.js","resolved":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\state-management\\dist\\actions.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineStates = exports.defineState = void 0;\nexports.inStates = inStates;\nexports.isState = isState;\nvar _rxjs = require(\"rxjs\");\nvar _actions = require(\"./actions\");\n/**\n * Define a State by providing a name and (optionally) the type of data the State carries. Returns a function which\n * creates states of that type.\n *\n * @param name The state's name, should be unique among all states used by a single state machine.\n * @returns The function returned is used to specify the type of data the State carries â€“ it must be called to return\n * the actual state creator, which is then strongly typed.\n */\nconst defineState = name => () => (0, _actions.defineAction)(name)();\n/**\n * Create an object from state creators, where each property is the name of the state.\n *\n * @param states Pass one or more states as arguments, using [[defineState]] to create each state.\n * @returns\n */\nexports.defineState = defineState;\nconst defineStates = (...states) => (0, _actions.defineActions)(...states);\n/**\n * Filter an `Observable<[Action, State]>` to only emit when the state matches one of the state names given as\n * arguments.\n * ```ts\n * myStateMachine.pipe(\n *   inStates('myFirstState', 'mySecondState'),\n * ).subscribe(doSomethingIfInEitherState)\n * ```\n *\n * @param states Pass one or more state names as arguments, used to filter an `Observable<[Action, State]>`\n * @returns An Observable which only emits when in one of the given states.\n */\nexports.defineStates = defineStates;\nfunction inStates(...states) {\n  return (0, _rxjs.filter)(v => states.some(state => v[1].name === state));\n}\n/**\n * Determine if a given state is of a specific type, given by an state name. This narrows the type of the state.\n *\n * @param state A state with a broad type (e.g. a union of many states)\n * @param name The name of a specific state.\n * @returns Narrows the type of the state argument to that state which has the given name.\n */\nfunction isState(state, name) {\n  return state.name === name;\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":4},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":1,"column":0},"name":"_rxjs"},{"generated":{"line":9,"column":9},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":12},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":9,"column":19},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":4},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":2,"column":0},"name":"_actions"},{"generated":{"line":10,"column":12},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":15},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":2,"column":0},"name":"require"},{"generated":{"line":10,"column":22},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":6,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":8,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":9,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":10,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":7}},{"generated":{"line":19,"column":6},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":13},"name":"defineState"},{"generated":{"line":19,"column":17},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":24}},{"generated":{"line":19,"column":20},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":28},"name":"name"},{"generated":{"line":19,"column":24},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":32}},{"generated":{"line":19,"column":28},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":37}},{"generated":{"line":19,"column":34},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":43}},{"generated":{"line":19,"column":38},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":43},"name":"defineAction"},{"generated":{"line":19,"column":59},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":55}},{"generated":{"line":19,"column":61},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":56},"name":"name"},{"generated":{"line":19,"column":65},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":60}},{"generated":{"line":19,"column":66},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":61}},{"generated":{"line":19,"column":67},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":62}},{"generated":{"line":19,"column":68},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":11,"column":63}},{"generated":{"line":20,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":13,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":14,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":15,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":16,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":17,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0},"name":"exports"},{"generated":{"line":26,"column":7},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0}},{"generated":{"line":26,"column":8},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0},"name":"defineState"},{"generated":{"line":26,"column":19},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0}},{"generated":{"line":26,"column":22},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0},"name":"defineState"},{"generated":{"line":26,"column":33},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":12,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":7}},{"generated":{"line":27,"column":6},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":13},"name":"defineStates"},{"generated":{"line":27,"column":18},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":25}},{"generated":{"line":27,"column":21},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":28},"name":"defineStates"},{"generated":{"line":27,"column":22},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":29}},{"generated":{"line":27,"column":25},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":32},"name":"states"},{"generated":{"line":27,"column":31},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":38}},{"generated":{"line":27,"column":36},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":43}},{"generated":{"line":27,"column":40},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":43},"name":"defineActions"},{"generated":{"line":27,"column":62},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":56}},{"generated":{"line":27,"column":64},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":57}},{"generated":{"line":27,"column":67},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":60},"name":"states"},{"generated":{"line":27,"column":73},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":66}},{"generated":{"line":27,"column":74},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":18,"column":67}},{"generated":{"line":28,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":20,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":21,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":22,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":23,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":24,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":25,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":26,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":27,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":28,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":29,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":30,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0},"name":"exports"},{"generated":{"line":40,"column":7},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0}},{"generated":{"line":40,"column":8},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0},"name":"defineStates"},{"generated":{"line":40,"column":20},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0}},{"generated":{"line":40,"column":23},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0},"name":"defineStates"},{"generated":{"line":40,"column":35},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":19,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":7}},{"generated":{"line":41,"column":9},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":16},"name":"inStates"},{"generated":{"line":41,"column":17},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":24},"name":"inStates"},{"generated":{"line":41,"column":18},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":25}},{"generated":{"line":41,"column":21},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":28},"name":"states"},{"generated":{"line":41,"column":27},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":34}},{"generated":{"line":41,"column":29},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":31,"column":36}},{"generated":{"line":42,"column":2},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":4}},{"generated":{"line":42,"column":9},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":11}},{"generated":{"line":42,"column":13},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":11},"name":"filter"},{"generated":{"line":42,"column":25},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":17}},{"generated":{"line":42,"column":27},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":19},"name":"v"},{"generated":{"line":42,"column":28},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":20}},{"generated":{"line":42,"column":32},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":25},"name":"states"},{"generated":{"line":42,"column":38},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":31}},{"generated":{"line":42,"column":39},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":32},"name":"some"},{"generated":{"line":42,"column":43},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":36}},{"generated":{"line":42,"column":44},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":37},"name":"state"},{"generated":{"line":42,"column":49},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":42}},{"generated":{"line":42,"column":53},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":46},"name":"v"},{"generated":{"line":42,"column":54},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":47}},{"generated":{"line":42,"column":55},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":48}},{"generated":{"line":42,"column":56},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":49}},{"generated":{"line":42,"column":57},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":50}},{"generated":{"line":42,"column":58},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":51},"name":"name"},{"generated":{"line":42,"column":62},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":55}},{"generated":{"line":42,"column":67},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":60},"name":"state"},{"generated":{"line":42,"column":72},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":65}},{"generated":{"line":42,"column":73},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":66}},{"generated":{"line":42,"column":74},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":32,"column":67}},{"generated":{"line":43,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":33,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":34,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":35,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":36,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":37,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":38,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":39,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":40,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":7}},{"generated":{"line":51,"column":9},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":16},"name":"isState"},{"generated":{"line":51,"column":16},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":23},"name":"isState"},{"generated":{"line":51,"column":17},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":24},"name":"state"},{"generated":{"line":51,"column":22},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":29}},{"generated":{"line":51,"column":24},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":31},"name":"name"},{"generated":{"line":51,"column":28},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":35}},{"generated":{"line":51,"column":30},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":41,"column":37}},{"generated":{"line":52,"column":2},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":4}},{"generated":{"line":52,"column":9},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":11},"name":"state"},{"generated":{"line":52,"column":14},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":16}},{"generated":{"line":52,"column":15},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":17},"name":"name"},{"generated":{"line":52,"column":19},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":21}},{"generated":{"line":52,"column":24},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":26},"name":"name"},{"generated":{"line":52,"column":28},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":42,"column":30}},{"generated":{"line":53,"column":0},"source":"node_modules/@snap/state-management/dist/states.js","original":{"line":43,"column":0}}],"sources":{"node_modules/@snap/state-management/dist/states.js":"import { filter } from 'rxjs';\nimport { defineAction, defineActions } from './actions';\n/**\n * Define a State by providing a name and (optionally) the type of data the State carries. Returns a function which\n * creates states of that type.\n *\n * @param name The state's name, should be unique among all states used by a single state machine.\n * @returns The function returned is used to specify the type of data the State carries â€“ it must be called to return\n * the actual state creator, which is then strongly typed.\n */\nexport const defineState = (name) => () => defineAction(name)();\n/**\n * Create an object from state creators, where each property is the name of the state.\n *\n * @param states Pass one or more states as arguments, using [[defineState]] to create each state.\n * @returns\n */\nexport const defineStates = (...states) => defineActions(...states);\n/**\n * Filter an `Observable<[Action, State]>` to only emit when the state matches one of the state names given as\n * arguments.\n * ```ts\n * myStateMachine.pipe(\n *   inStates('myFirstState', 'mySecondState'),\n * ).subscribe(doSomethingIfInEitherState)\n * ```\n *\n * @param states Pass one or more state names as arguments, used to filter an `Observable<[Action, State]>`\n * @returns An Observable which only emits when in one of the given states.\n */\nexport function inStates(...states) {\n    return filter((v) => states.some(state => v[1].name === state));\n}\n/**\n * Determine if a given state is of a specific type, given by an state name. This narrows the type of the state.\n *\n * @param state A state with a broad type (e.g. a union of many states)\n * @param name The name of a specific state.\n * @returns Narrows the type of the state argument to that state which has the given name.\n */\nexport function isState(state, name) {\n    return state.name === name;\n}\n"},"lineCount":null}},"error":null,"hash":"b58fc2f111b53acfd9a960de999689c3","cacheData":{"env":{}}}