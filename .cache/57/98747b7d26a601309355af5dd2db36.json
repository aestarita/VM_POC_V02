{"id":"node_modules/@snap/camera-kit/lib/metrics/metricsEventTarget.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\metrics\\metricsEventTarget.js.map","includedInParent":true,"mtime":1689894620990},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849},{"name":"../dependency-injection/Injectable","loc":{"line":1,"column":27,"index":27},"parent":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\metrics\\metricsEventTarget.js","resolved":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\dependency-injection\\Injectable.js"},{"name":"../events/TypedEventTarget","loc":{"line":2,"column":33,"index":98},"parent":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\metrics\\metricsEventTarget.js","resolved":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\events\\TypedEventTarget.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.metricsEventTargetFactory = void 0;\nvar _Injectable = require(\"../dependency-injection/Injectable\");\nvar _TypedEventTarget = require(\"../events/TypedEventTarget\");\n/**\n * Any metrics that we wish to emit to applications should be dispatched on this event target.\n *\n * Our business events reporter also listens to this event target, and may report the emitted metrics to our backend.\n *\n * @internal\n */\nconst metricsEventTargetFactory = (0, _Injectable.Injectable)(\"metricsEventTarget\", () => new _TypedEventTarget.TypedEventTarget());\nexports.metricsEventTargetFactory = metricsEventTargetFactory;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":15}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":18}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":25}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":4}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":21}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":24}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":31}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":48,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":7},"generated":{"line":16,"column":0}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":13},"generated":{"line":16,"column":6}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":38},"generated":{"line":16,"column":31}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":41},"generated":{"line":16,"column":34}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":41},"generated":{"line":16,"column":38}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":55,"column":51},"generated":{"line":16,"column":60}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":56,"column":4},"generated":{"line":16,"column":62}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":56,"column":24},"generated":{"line":16,"column":82}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":16,"column":84}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":30},"generated":{"line":16,"column":90}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":34},"generated":{"line":16,"column":94}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":16,"column":128}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":16,"column":129}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":57,"column":52},"generated":{"line":16,"column":130}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":16,"column":131}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":0}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":7}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":8}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":33}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":36}},{"source":"../../src/metrics/metricsEventTarget.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":17,"column":61}}],"sources":{"../../src/metrics/metricsEventTarget.ts":"import { Injectable } from \"../dependency-injection/Injectable\";\nimport { TypedCustomEvent } from \"../events/TypedCustomEvent\";\nimport { TypedEventTarget } from \"../events/TypedEventTarget\";\nimport { AssetValidationFailed } from \"../lens/assets/LensAssetsProvider\";\nimport { AssetDownload, LensDownload } from \"./reporters/reportLensAndAssetDownload\";\nimport { LensContentValidationFailed } from \"./reporters/reportLensValidationFailed\";\nimport { LensView } from \"./reporters/reportLensView\";\nimport { LensWait } from \"./reporters/reportLensWait\";\nimport { Session } from \"./reporters/reportUserSession\";\nimport { BenchmarkComplete } from \"./reporters/reportBenchmarks\";\nimport { LegalPrompt } from \"./reporters/reportLegalState\";\nimport { MakeTaggedBusinessEvent } from \"./businessEventsReporter\";\n\n/**\n * The Exception metric reports every time we handle an exception.\n */\nexport type Exception = MakeTaggedBusinessEvent<\"exception\">;\n\nexport type CameraKitBootstrapMetricEvents = TypedCustomEvent<BenchmarkComplete[\"name\"], BenchmarkComplete>;\n\nexport type CameraKitSessionMetricEvents =\n    | TypedCustomEvent<LegalPrompt[\"name\"], LegalPrompt>\n    | TypedCustomEvent<LensView[\"name\"], LensView>\n    | TypedCustomEvent<LensWait[\"name\"], LensWait>\n    | TypedCustomEvent<LensDownload[\"name\"], LensDownload>\n    | TypedCustomEvent<AssetDownload[\"name\"], AssetDownload>\n    | TypedCustomEvent<AssetValidationFailed[\"name\"], AssetValidationFailed>\n    | TypedCustomEvent<LensContentValidationFailed[\"name\"], LensContentValidationFailed>\n    | TypedCustomEvent<Session[\"name\"], Session>;\n\n/**\n * A union of all event types emitted by the {@link CameraKit.events} event emitter.\n *\n * @internal\n */\nexport type CameraKitMetricEvents =\n    | CameraKitSessionMetricEvents\n    | CameraKitBootstrapMetricEvents\n    | TypedCustomEvent<Exception[\"name\"], Exception>;\n\n/**\n * This event target may be used to listen for any of the metrics events reported by CameraKit.\n *\n * @internal\n */\nexport type MetricsEventTarget = TypedEventTarget<CameraKitMetricEvents>;\n\n/**\n * Any metrics that we wish to emit to applications should be dispatched on this event target.\n *\n * Our business events reporter also listens to this event target, and may report the emitted metrics to our backend.\n *\n * @internal\n */\nexport const metricsEventTargetFactory = Injectable(\n    \"metricsEventTarget\",\n    (): MetricsEventTarget => new TypedEventTarget()\n);\n"},"lineCount":null}},"error":null,"hash":"7084543f94a44d192306f10515f4b885","cacheData":{"env":{}}}