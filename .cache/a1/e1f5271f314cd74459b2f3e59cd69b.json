{"id":"node_modules/@snap/camera-kit/lib/common/copyDefinedProperties.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\common\\copyDefinedProperties.js.map","includedInParent":true,"mtime":1689894620884},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyDefinedProperties = copyDefinedProperties;\n/**\n * Copy only those properties of an object which are not undefined.\n *\n * This can be useful when using `Object.assign(foo, bar)` or `{ ...foo, ...bar }` to copy values from one object to\n * another. There's a (rather annoying) difference between a property not existing in an object and that property\n * existing but having an undefined value. When copying values using either of the methods above, it's generally\n * expected that undefined properties won't overwrite defined properties. But that's not the behavior – this helper\n * function is needed to ensure undefined properties in `bar` don't clobber corresponding properties in `foo`.\n *\n * @param obj Any object, possibly with properties whose values are undefined.\n * @returns A copy of the input object, without keys whose values were undefined.\n */\nfunction copyDefinedProperties(obj) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value !== undefined));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":19,"column":0}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":16},"generated":{"line":19,"column":9}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":37},"generated":{"line":19,"column":30}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":52},"generated":{"line":19,"column":31}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":58},"generated":{"line":19,"column":34}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":13,"column":58},"generated":{"line":19,"column":36}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":20,"column":2}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":11},"generated":{"line":20,"column":9}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":17},"generated":{"line":20,"column":15}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":20,"column":16}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":29},"generated":{"line":20,"column":27}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":30},"generated":{"line":20,"column":28}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":36},"generated":{"line":20,"column":34}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":37},"generated":{"line":20,"column":35}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":44},"generated":{"line":20,"column":42}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":45},"generated":{"line":20,"column":43}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":48},"generated":{"line":20,"column":46}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":49},"generated":{"line":20,"column":47}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":50},"generated":{"line":20,"column":48}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":56},"generated":{"line":20,"column":54}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":57},"generated":{"line":20,"column":55}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":58},"generated":{"line":20,"column":56}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":59},"generated":{"line":20,"column":57}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":60},"generated":{"line":20,"column":58}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":62},"generated":{"line":20,"column":60}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":67},"generated":{"line":20,"column":65}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":68},"generated":{"line":20,"column":66}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":73},"generated":{"line":20,"column":71}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":78},"generated":{"line":20,"column":76}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":83},"generated":{"line":20,"column":81}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":92},"generated":{"line":20,"column":90}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":93},"generated":{"line":20,"column":91}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":14,"column":99},"generated":{"line":20,"column":92}},{"source":"../../src/common/copyDefinedProperties.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}}],"sources":{"../../src/common/copyDefinedProperties.ts":"/**\n * Copy only those properties of an object which are not undefined.\n *\n * This can be useful when using `Object.assign(foo, bar)` or `{ ...foo, ...bar }` to copy values from one object to\n * another. There's a (rather annoying) difference between a property not existing in an object and that property\n * existing but having an undefined value. When copying values using either of the methods above, it's generally\n * expected that undefined properties won't overwrite defined properties. But that's not the behavior – this helper\n * function is needed to ensure undefined properties in `bar` don't clobber corresponding properties in `foo`.\n *\n * @param obj Any object, possibly with properties whose values are undefined.\n * @returns A copy of the input object, without keys whose values were undefined.\n */\nexport function copyDefinedProperties<T extends {}>(obj: T): T {\n    return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value !== undefined)) as T;\n}\n"},"lineCount":null}},"error":null,"hash":"704e554c8ed9c7c313e3e54da5e0398f","cacheData":{"env":{}}}