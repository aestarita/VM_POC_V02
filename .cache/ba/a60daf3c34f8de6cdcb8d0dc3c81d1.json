{"id":"node_modules/@snap/camera-kit/lib/handlers/HandlerChainBuilder.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\handlers\\HandlerChainBuilder.js.map","includedInParent":true,"mtime":1689894620926},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HandlerChainBuilder = void 0;\n/**\n * Creates a Handler chain – a series of functions composed such that each function may call a supplied `next` function\n * which passes execution down the chain. When the final Handler in the chain returns, execution passes back up the\n * chain eventually returning to the caller.\n *\n * Each Handler chain begins with a \"raw\" Handler – this is a function which takes some request and returns some\n * response. A chain is then created by supplying a series of mapping functions – the ChainableHandler type – which will\n * be called with the `next` Handler in the chain.\n *\n * Ex:\n * ```ts\n * const handler = (request: string, metadata?: RequestMetadata) => Promise.resolve(`Responded to ${request}`)\n * const chainable = (next: Handler<string, string>) => (request: string, metadata?: RequestMetadata) => {\n *   return next(`modified ${request}`, metadata)\n * }\n *\n * const chain = new HandlerChainBuilder(handler)\n *   .map(chainable)\n *   .handler\n *\n * const response = await chain('hello')\n * expect(response).toBe('Responded to modified hello; 0')\n * ```\n * You can largely ignore the `metadata` argument present in the above example. This is the mechanism by which an\n * AbortSignal is passed to each Handler in the chain, but the only real requirement when implementing a Handler is\n * to pass this argument along to the `next` function. In fact, many Handlers will want to be generic over the type\n * of metadata:\n * ```ts\n * const chainable = <Meta>(next: Handler<string, string, Meta>) => (request: string, metadata: Meta) => {\n *   return next(`modified ${request}`, metadata)\n * }\n * ```\n * Actually, it's a very good idea for Handlers to be as generic as possible, since that will allow greater re-use. In\n * the above example, we don't do anything with the response from `next`, so we can let that be generic, too:\n * ```ts\n * const chainable = <Res, Meta>(next: Handler<string, Res, Meta>) => (request: string, metadata: Meta) => {\n *   return next(`modified ${request}`, metadata)\n * }\n * ```\n * Now if some other Handler in the chain decides to return a different response type, our Handler won't require any\n * changes to compile.\n *\n * ---\n *\n * Since execution passes from handler to handler in the chain, and then back, handlers have the opportunity to modify\n * or observe both the request and response. This might be useful for implementing serialization/deserialization, but\n * the simplest example that demonstrates this feature is measuring request latency:\n * ```ts\n * const latencyMeasuringHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) =>\n *   async (req: Req, metadata: Meta) => {\n *     const start = performance.now()\n *     const response = await next(req, metadata)\n *     const latency = performance.now() - start\n *     console.log(`latency for request ${request} was ${latency}`)\n *     return response\n *   }\n * ```\n * Execution is first passed to our measuring handler, which marks the `start` timestamp. Then it passes execution on\n * down the chain. After a response is received (by some handler down the chain), execution passes back up to our\n * handler here, which records the amount of time spent inside `next`.\n *\n * ---\n *\n * Handlers may also abort requests. They can do this in two ways:\n *   1. Create an `AbortController` and add its `AbortSignal` to the `metadata` object when calling `next`.\n *   2. Resolve its returned Promise.\n *\n * The first approach is straightforward, but the second may benefit from an example – the simplest is a handler which\n * will timeout a request:\n * ```ts\n * const timeoutHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) => (req: Req, metadata: Meta) => {\n *   return Promise.race([\n *     next(req, metadata),\n *     sleep(1000),\n *   ])\n * }\n * ```\n * The Promise returned by this handler will resolve either when the `next` handler resolves or 1 second has elapsed,\n * whichever happens first. If the timeout happens first, we want the `next` handler to recieve an abort signal so that\n * it can terminate early (since its result is no longer needed).\n *\n * HandlerChainBuilder makes this happen by observing when each handler completes, and sending an abort signal to all\n * the handlers \"downstream\" from the aborting handler.\n */\nclass HandlerChainBuilder {\n  constructor(inner) {\n    // The TS compiler has the following behavior:\n    //\n    // class Infer<T extends SomeType | undefined> { constructor(f: (t?: T) => void) {} }\n    // const f = (t?: SomeType) => {}\n    // const i = new Infer(f)\n    //\n    // The type of `i` is inferred to be `Infer<SomeType>` instead of `Infer<SomeType | undefined>`, even though the\n    // type of `f`'s argument is `SomeType | undefined`. This seems to be a bug in type inference. Note that making\n    // the constructor argument required gives the expected behavior:\n    //\n    // class Infer<T extends SomeType | undefined> { constructor(f: (t: T) => void) {} }\n    // const f = (t?: SomeType) => {}\n    // const i = new Infer(f)\n    //\n    // Now `i` is inferred to be `Infer<SomeType | undefined>`.\n    //\n    // This has consequences if the inferred type T is used elsewhere in the class.\n    //\n    // In this case, we need to make sure that if the given `inner` function marks the metadata argument as\n    // optional, that HandlerChainBuilder correctly infers that the Meta type includes undefined. So we don't mark\n    // metadata as optional, and so we must cast to `Handler` (which does mark it as optional).\n    //\n    // Safety: We're adding `| undefined` to the metadata type, which may be unsafe – `undefined` may not be\n    // assignable to Meta. But when handling the argument of type Meta, we simply pass it through from handler to\n    // handler – we never call `inner` without passing the metadata argument we've received from some call to an\n    // outer handler. The typing visible to callers remains safe.\n    this.inner = inner;\n  }\n  get handler() {\n    return this.inner;\n  }\n  map(outer) {\n    // To create the next handler in the chain, we compose the \"outer\" handler with the \"inner\" handler.\n    //\n    // The outer handler observes its own completion and sends an abort signal to the inner handler when it has\n    // resolved. To prevent unexpected behavior, the inner handler also observes its own completion, setting a flag\n    // when it resolves so that – if it resolves before the outer handler – the outer handler can skip sending the\n    // abort signal (since the inner handler has already completed).\n    const outerHandler = (req, metadata) => {\n      var _a;\n      const abort = new AbortController();\n      const signal = abort.signal;\n      // It's important to not signal an abort to an inner handler which has already completed – it seems like\n      // this would be a non-issue (shouldn't aborting after completion be a no-op?), but specifically for the\n      // browser's implementation of `fetch`, aborting even after the `fetch` Promise resolves can cause an abort\n      // error if e.g. the Fetch Response's body has not yet been read.\n      //\n      // So, for safety, we will only abort inner handlers which are still executing.\n      let innerCompleted = false;\n      const maybeAbort = () => {\n        var _a;\n        // Safety: we never give `abort` to anyone else, so we know if the signal is aborted, this function\n        // has already run, so we can return early without fear of leaking. We also know if inner has completed,\n        // it has already performed cleanup.\n        if (signal.aborted || innerCompleted) return;\n        // If we've gotten here, the outer handler has either completed, or we heard an abort event while the\n        // inner handler is still executing – so we pass the abort signal down to the inner handler.\n        abort.abort();\n        (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", maybeAbort);\n      };\n      (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", maybeAbort);\n      const innerHandler = new Proxy(this.inner, {\n        apply: (target, thisArg, args) => {\n          const [req, metadata] = args;\n          // When calling the inner handler, we may not care about the result and don't want the handler's\n          // operation to be interrupted by an abort signal. For example, we might be calling the inner\n          // handler as a side-effect which we want to continue after the outer handler has completed.\n          //\n          // A concrete example: returning a value from cache immediately, but then calling the inner handler\n          // as a side-effect to refresh the cache \"in the background.\"\n          const innerSignal = (metadata === null || metadata === void 0 ? void 0 : metadata.isSideEffect) ? undefined : signal;\n          // To help Handler authors out, we'll do some bookkeeping and cleanup for them – if they forget to\n          // remove an abort event listener, we'll remove it for them when the Promise they return resolves.\n          // Note: No need to proxy removeEventListener, since removing a non-existent listener just no-ops.\n          const abortListeners = [];\n          signal.addEventListener = new Proxy(signal.addEventListener, {\n            apply: (target, thisArg, args) => {\n              abortListeners.push(args[1]);\n              return Reflect.apply(target, thisArg, args);\n            }\n          });\n          const cleanupAndMarkComplete = () => {\n            var _a;\n            // The only reason we listen to upstream aborts is to pass them to the inner handler – since the\n            // inner handler has completed, we no longer need the listener.\n            (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", maybeAbort);\n            abortListeners.forEach(listener => signal.removeEventListener(\"abort\", listener));\n            innerCompleted = true;\n          };\n          const innerResponse = Reflect.apply(target, thisArg, [req, Object.assign(Object.assign({}, metadata), {\n            signal: innerSignal\n          })]);\n          // Using `finally` is more idiomatic, but causes trouble in some environments (e.g. some testing\n          // runtimes which detect uncaught rejected promises).\n          innerResponse.catch(() => {}).then(cleanupAndMarkComplete);\n          return innerResponse;\n        }\n      });\n      const outerResponse = outer(innerHandler)(req, metadata);\n      outerResponse.catch(() => {}).then(maybeAbort);\n      return outerResponse;\n    };\n    return new HandlerChainBuilder(outerHandler);\n  }\n}\nexports.HandlerChainBuilder = HandlerChainBuilder;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":110,"column":6},"generated":{"line":91,"column":0}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":110,"column":13},"generated":{"line":91,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":110,"column":32},"generated":{"line":91,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":110,"column":32},"generated":{"line":91,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":113,"column":4},"generated":{"line":92,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":113,"column":4},"generated":{"line":92,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":113,"column":16},"generated":{"line":92,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":113,"column":65},"generated":{"line":92,"column":19}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":113,"column":65},"generated":{"line":92,"column":21}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":114,"column":8},"generated":{"line":93,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":115,"column":8},"generated":{"line":94,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":116,"column":8},"generated":{"line":95,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":117,"column":8},"generated":{"line":96,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":118,"column":8},"generated":{"line":97,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":119,"column":8},"generated":{"line":98,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":120,"column":8},"generated":{"line":99,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":121,"column":8},"generated":{"line":100,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":122,"column":8},"generated":{"line":101,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":123,"column":8},"generated":{"line":102,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":124,"column":8},"generated":{"line":103,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":125,"column":8},"generated":{"line":104,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":126,"column":8},"generated":{"line":105,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":127,"column":8},"generated":{"line":106,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":128,"column":8},"generated":{"line":107,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":129,"column":8},"generated":{"line":108,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":130,"column":8},"generated":{"line":109,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":131,"column":8},"generated":{"line":110,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":132,"column":8},"generated":{"line":111,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":133,"column":8},"generated":{"line":112,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":134,"column":8},"generated":{"line":113,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":135,"column":8},"generated":{"line":114,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":136,"column":8},"generated":{"line":115,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":137,"column":8},"generated":{"line":116,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":138,"column":8},"generated":{"line":117,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":139,"column":8},"generated":{"line":118,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":8},"generated":{"line":119,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":12},"generated":{"line":119,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":13},"generated":{"line":119,"column":9}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":18},"generated":{"line":119,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":21},"generated":{"line":119,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":140,"column":53},"generated":{"line":119,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":141,"column":4},"generated":{"line":120,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":143,"column":4},"generated":{"line":121,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":143,"column":8},"generated":{"line":121,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":143,"column":15},"generated":{"line":121,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":143,"column":15},"generated":{"line":121,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":143,"column":15},"generated":{"line":121,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":144,"column":8},"generated":{"line":122,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":144,"column":15},"generated":{"line":122,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":144,"column":19},"generated":{"line":122,"column":15}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":144,"column":20},"generated":{"line":122,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":144,"column":25},"generated":{"line":122,"column":21}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":145,"column":4},"generated":{"line":123,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":147,"column":4},"generated":{"line":124,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":147,"column":7},"generated":{"line":124,"column":5}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":148,"column":8},"generated":{"line":124,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":148,"column":67},"generated":{"line":124,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":148,"column":67},"generated":{"line":124,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":150,"column":8},"generated":{"line":125,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":151,"column":8},"generated":{"line":126,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":152,"column":8},"generated":{"line":127,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":128,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":154,"column":8},"generated":{"line":129,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":130,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":8},"generated":{"line":131,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":14},"generated":{"line":131,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":26},"generated":{"line":131,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":29},"generated":{"line":131,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":30},"generated":{"line":131,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":43},"generated":{"line":131,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":45},"generated":{"line":131,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":59},"generated":{"line":131,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":156,"column":82},"generated":{"line":131,"column":44}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":12},"generated":{"line":133,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":18},"generated":{"line":133,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":23},"generated":{"line":133,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":26},"generated":{"line":133,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":30},"generated":{"line":133,"column":24}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":45},"generated":{"line":133,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":45},"generated":{"line":133,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":157,"column":47},"generated":{"line":133,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":12},"generated":{"line":134,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":18},"generated":{"line":134,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":24},"generated":{"line":134,"column":18}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":27},"generated":{"line":134,"column":21}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":32},"generated":{"line":134,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":33},"generated":{"line":134,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":158,"column":39},"generated":{"line":134,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":160,"column":12},"generated":{"line":135,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":161,"column":12},"generated":{"line":136,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":162,"column":12},"generated":{"line":137,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":163,"column":12},"generated":{"line":138,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":164,"column":12},"generated":{"line":139,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":165,"column":12},"generated":{"line":140,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":166,"column":12},"generated":{"line":141,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":166,"column":16},"generated":{"line":141,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":166,"column":30},"generated":{"line":141,"column":24}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":166,"column":33},"generated":{"line":141,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":166,"column":38},"generated":{"line":141,"column":32}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":12},"generated":{"line":142,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":18},"generated":{"line":142,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":28},"generated":{"line":142,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":31},"generated":{"line":142,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":31},"generated":{"line":142,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":168,"column":36},"generated":{"line":142,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":169,"column":16},"generated":{"line":144,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":170,"column":16},"generated":{"line":145,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":171,"column":16},"generated":{"line":146,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":16},"generated":{"line":147,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":20},"generated":{"line":147,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":26},"generated":{"line":147,"column":18}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":27},"generated":{"line":147,"column":19}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":34},"generated":{"line":147,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":38},"generated":{"line":147,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":52},"generated":{"line":147,"column":44}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":172,"column":54},"generated":{"line":147,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":174,"column":16},"generated":{"line":148,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":175,"column":16},"generated":{"line":149,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":16},"generated":{"line":150,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":21},"generated":{"line":150,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":22},"generated":{"line":150,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":27},"generated":{"line":150,"column":19}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":27},"generated":{"line":150,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":176,"column":29},"generated":{"line":150,"column":21}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":9}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":43}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":48}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":53}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":54}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":57}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":62}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":63}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":16},"generated":{"line":151,"column":66}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":24},"generated":{"line":151,"column":74}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":26},"generated":{"line":151,"column":75}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":81}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":87}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":91}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":95}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":97}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":102}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":107}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":108}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":111}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":116}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":117}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":120}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":32},"generated":{"line":151,"column":122}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":34},"generated":{"line":151,"column":123}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":53},"generated":{"line":151,"column":142}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":54},"generated":{"line":151,"column":143}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":61},"generated":{"line":151,"column":150}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":63},"generated":{"line":151,"column":152}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":73},"generated":{"line":151,"column":162}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":177,"column":74},"generated":{"line":151,"column":163}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":178,"column":12},"generated":{"line":152,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":178,"column":13},"generated":{"line":152,"column":7}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":7}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":9}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":51}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":55}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":60}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":61}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":12},"generated":{"line":153,"column":64}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":20},"generated":{"line":153,"column":72}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":22},"generated":{"line":153,"column":73}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":79}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":85}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":89}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":93}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":95}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":100}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":105}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":106}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":109}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":114}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":115}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":118}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":28},"generated":{"line":153,"column":120}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":30},"generated":{"line":153,"column":121}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":46},"generated":{"line":153,"column":137}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":47},"generated":{"line":153,"column":138}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":54},"generated":{"line":153,"column":145}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":56},"generated":{"line":153,"column":147}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":66},"generated":{"line":153,"column":157}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":180,"column":67},"generated":{"line":153,"column":158}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":12},"generated":{"line":154,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":18},"generated":{"line":154,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":30},"generated":{"line":154,"column":24}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":33},"generated":{"line":154,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":37},"generated":{"line":154,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":42},"generated":{"line":154,"column":36}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":43},"generated":{"line":154,"column":37}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":47},"generated":{"line":154,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":48},"generated":{"line":154,"column":42}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":53},"generated":{"line":154,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":182,"column":55},"generated":{"line":154,"column":49}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":16},"generated":{"line":155,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":21},"generated":{"line":155,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":23},"generated":{"line":155,"column":15}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":24},"generated":{"line":155,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":30},"generated":{"line":155,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":32},"generated":{"line":155,"column":24}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":39},"generated":{"line":155,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":41},"generated":{"line":155,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":45},"generated":{"line":155,"column":37}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":183,"column":49},"generated":{"line":155,"column":42}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":20},"generated":{"line":156,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":26},"generated":{"line":156,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":27},"generated":{"line":156,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":30},"generated":{"line":156,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":32},"generated":{"line":156,"column":22}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":40},"generated":{"line":156,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":41},"generated":{"line":156,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":44},"generated":{"line":156,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":184,"column":77},"generated":{"line":156,"column":38}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":186,"column":20},"generated":{"line":157,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":187,"column":20},"generated":{"line":158,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":188,"column":20},"generated":{"line":159,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":189,"column":20},"generated":{"line":160,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":190,"column":20},"generated":{"line":161,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":191,"column":20},"generated":{"line":162,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":20},"generated":{"line":163,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":26},"generated":{"line":163,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":37},"generated":{"line":163,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":40},"generated":{"line":163,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":40},"generated":{"line":163,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":44}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":48}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":40},"generated":{"line":163,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":60}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":65}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":70}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":71}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":74}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":79}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":80}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":40},"generated":{"line":163,"column":83}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":48},"generated":{"line":163,"column":91}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":50},"generated":{"line":163,"column":92}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":62},"generated":{"line":163,"column":104}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":65},"generated":{"line":163,"column":108}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":74},"generated":{"line":163,"column":117}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":77},"generated":{"line":163,"column":120}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":192,"column":83},"generated":{"line":163,"column":126}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":194,"column":20},"generated":{"line":164,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":195,"column":20},"generated":{"line":165,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":196,"column":20},"generated":{"line":166,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":197,"column":20},"generated":{"line":167,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":197,"column":26},"generated":{"line":167,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":197,"column":40},"generated":{"line":167,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":197,"column":81},"generated":{"line":167,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":197,"column":83},"generated":{"line":167,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":20},"generated":{"line":168,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":26},"generated":{"line":168,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":27},"generated":{"line":168,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":43},"generated":{"line":168,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":46},"generated":{"line":168,"column":36}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":50},"generated":{"line":168,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":55},"generated":{"line":168,"column":45}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":56},"generated":{"line":168,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":62},"generated":{"line":168,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":63},"generated":{"line":168,"column":53}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":79},"generated":{"line":168,"column":69}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":198,"column":81},"generated":{"line":168,"column":71}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":24},"generated":{"line":169,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":29},"generated":{"line":169,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":31},"generated":{"line":169,"column":19}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":32},"generated":{"line":169,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":38},"generated":{"line":169,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":40},"generated":{"line":169,"column":28}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":47},"generated":{"line":169,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":49},"generated":{"line":169,"column":37}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":53},"generated":{"line":169,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":199,"column":57},"generated":{"line":169,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":28},"generated":{"line":170,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":42},"generated":{"line":170,"column":28}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":43},"generated":{"line":170,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":47},"generated":{"line":170,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":48},"generated":{"line":170,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":52},"generated":{"line":170,"column":38}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":53},"generated":{"line":170,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":54},"generated":{"line":170,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":55},"generated":{"line":170,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":200,"column":56},"generated":{"line":170,"column":42}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":28},"generated":{"line":171,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":35},"generated":{"line":171,"column":21}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":42},"generated":{"line":171,"column":28}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":43},"generated":{"line":171,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":48},"generated":{"line":171,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":49},"generated":{"line":171,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":55},"generated":{"line":171,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":57},"generated":{"line":171,"column":43}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":64},"generated":{"line":171,"column":50}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":66},"generated":{"line":171,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":70},"generated":{"line":171,"column":56}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":201,"column":71},"generated":{"line":171,"column":57}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":202,"column":24},"generated":{"line":172,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":203,"column":21},"generated":{"line":173,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":203,"column":22},"generated":{"line":173,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":20},"generated":{"line":174,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":26},"generated":{"line":174,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":48},"generated":{"line":174,"column":38}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":51},"generated":{"line":174,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":51},"generated":{"line":174,"column":42}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":205,"column":56},"generated":{"line":174,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":206,"column":24},"generated":{"line":176,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":207,"column":24},"generated":{"line":177,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":15}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":18}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":31}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":57}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":58}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":61}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":66}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":67}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":24},"generated":{"line":178,"column":70}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":178,"column":78}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":34},"generated":{"line":178,"column":79}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":85}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":91}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":95}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":99}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":101}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":106}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":111}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":112}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":115}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":120}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":121}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":124}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":40},"generated":{"line":178,"column":126}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":42},"generated":{"line":178,"column":127}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":61},"generated":{"line":178,"column":146}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":62},"generated":{"line":178,"column":147}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":69},"generated":{"line":178,"column":154}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":71},"generated":{"line":178,"column":156}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":81},"generated":{"line":178,"column":166}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":208,"column":82},"generated":{"line":178,"column":167}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":24},"generated":{"line":179,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":38},"generated":{"line":179,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":39},"generated":{"line":179,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":46},"generated":{"line":179,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":48},"generated":{"line":179,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":56},"generated":{"line":179,"column":43}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":61},"generated":{"line":179,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":67},"generated":{"line":179,"column":53}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":68},"generated":{"line":179,"column":54}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":87},"generated":{"line":179,"column":73}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":88},"generated":{"line":179,"column":74}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":95},"generated":{"line":179,"column":81}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":97},"generated":{"line":179,"column":83}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":105},"generated":{"line":179,"column":91}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":106},"generated":{"line":179,"column":92}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":209,"column":107},"generated":{"line":179,"column":93}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":210,"column":24},"generated":{"line":180,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":210,"column":38},"generated":{"line":180,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":210,"column":41},"generated":{"line":180,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":210,"column":45},"generated":{"line":180,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":211,"column":20},"generated":{"line":181,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":211,"column":21},"generated":{"line":181,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":20},"generated":{"line":182,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":26},"generated":{"line":182,"column":16}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":39},"generated":{"line":182,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":69},"generated":{"line":182,"column":32}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":76},"generated":{"line":182,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":77},"generated":{"line":182,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":82},"generated":{"line":182,"column":45}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":83},"generated":{"line":182,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":89},"generated":{"line":182,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":91},"generated":{"line":182,"column":54}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":98},"generated":{"line":182,"column":61}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":213,"column":100},"generated":{"line":182,"column":63}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":214,"column":24},"generated":{"line":182,"column":64}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":214,"column":27},"generated":{"line":182,"column":67}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":29},"generated":{"line":182,"column":101}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":37},"generated":{"line":182,"column":109}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":37},"generated":{"line":182,"column":110}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":37},"generated":{"line":182,"column":112}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":39},"generated":{"line":183,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":45},"generated":{"line":183,"column":18}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":47},"generated":{"line":183,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":58},"generated":{"line":184,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":58},"generated":{"line":184,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":215,"column":58},"generated":{"line":184,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":216,"column":21},"generated":{"line":184,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":216,"column":22},"generated":{"line":184,"column":14}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":218,"column":20},"generated":{"line":185,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":219,"column":20},"generated":{"line":186,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":20},"generated":{"line":187,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":33},"generated":{"line":187,"column":23}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":34},"generated":{"line":187,"column":24}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":39},"generated":{"line":187,"column":29}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":40},"generated":{"line":187,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":45},"generated":{"line":187,"column":36}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":47},"generated":{"line":187,"column":37}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":48},"generated":{"line":187,"column":38}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":49},"generated":{"line":187,"column":39}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":50},"generated":{"line":187,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":54},"generated":{"line":187,"column":44}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":55},"generated":{"line":187,"column":45}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":77},"generated":{"line":187,"column":67}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":220,"column":78},"generated":{"line":187,"column":68}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":221,"column":20},"generated":{"line":188,"column":10}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":221,"column":27},"generated":{"line":188,"column":17}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":221,"column":40},"generated":{"line":188,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":222,"column":16},"generated":{"line":189,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":223,"column":13},"generated":{"line":190,"column":7}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":223,"column":14},"generated":{"line":190,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":12},"generated":{"line":191,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":18},"generated":{"line":191,"column":12}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":31},"generated":{"line":191,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":34},"generated":{"line":191,"column":28}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":39},"generated":{"line":191,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":40},"generated":{"line":191,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":52},"generated":{"line":191,"column":46}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":53},"generated":{"line":191,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":54},"generated":{"line":191,"column":48}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":57},"generated":{"line":191,"column":51}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":59},"generated":{"line":191,"column":53}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":67},"generated":{"line":191,"column":61}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":225,"column":68},"generated":{"line":191,"column":62}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":12},"generated":{"line":192,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":25},"generated":{"line":192,"column":19}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":26},"generated":{"line":192,"column":20}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":31},"generated":{"line":192,"column":25}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":32},"generated":{"line":192,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":37},"generated":{"line":192,"column":32}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":39},"generated":{"line":192,"column":33}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":40},"generated":{"line":192,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":41},"generated":{"line":192,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":42},"generated":{"line":192,"column":36}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":46},"generated":{"line":192,"column":40}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":47},"generated":{"line":192,"column":41}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":57},"generated":{"line":192,"column":51}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":226,"column":58},"generated":{"line":192,"column":52}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":227,"column":12},"generated":{"line":193,"column":6}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":227,"column":19},"generated":{"line":193,"column":13}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":227,"column":32},"generated":{"line":193,"column":26}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":228,"column":8},"generated":{"line":194,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":228,"column":9},"generated":{"line":194,"column":5}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":8},"generated":{"line":195,"column":4}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":15},"generated":{"line":195,"column":11}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":19},"generated":{"line":195,"column":15}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":38},"generated":{"line":195,"column":34}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":39},"generated":{"line":195,"column":35}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":88},"generated":{"line":195,"column":47}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":229,"column":89},"generated":{"line":195,"column":48}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":230,"column":4},"generated":{"line":196,"column":2}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":0}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":7}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":8}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":27}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":30}},{"source":"../../src/handlers/HandlerChainBuilder.ts","name":null,"original":{"line":231,"column":1},"generated":{"line":198,"column":49}}],"sources":{"../../src/handlers/HandlerChainBuilder.ts":"export type RequestMetadata =\n    | {\n          signal?: AbortSignal | null | undefined;\n          /**\n           * When calling a handler, if that handler is part of a handler chain, then by default an abort signal will be\n           * sent to that handler if another handler higher up in the chain completes first. Usually this is desirable,\n           * since we know if a handler higher up in the chain has completed and returned a response to its caller, then\n           * the response from all the handlers below it in the chain will not be used.\n           *\n           * But in some cases, a handler in a handler chain wants to call the next handler in the chain as a\n           * side-effect. If a handler is called as a side-effect, it will not be sent an abort signal when handlers\n           * higher up in the chain complete.\n           *\n           * For example: a caching handler might return a cached value immediately, but then call the next handler as\n           * a side-effect to fetch an updated value to refresh the cache in the background. In that case, the next\n           * handler should not be sent an abort signal when the caching handler returns the cached value.\n           */\n          isSideEffect?: boolean;\n      }\n    | undefined;\nexport type Handler<Req, Res, Meta extends RequestMetadata> = (req: Req, metadata?: Meta) => Promise<Res>;\nexport type ChainableHandler<Req, Res, NextReq, NextRes, Meta extends RequestMetadata | undefined> = (\n    next: Handler<NextReq, NextRes, Meta>\n) => Handler<Req, Res, Meta>;\n\n/**\n * Creates a Handler chain – a series of functions composed such that each function may call a supplied `next` function\n * which passes execution down the chain. When the final Handler in the chain returns, execution passes back up the\n * chain eventually returning to the caller.\n *\n * Each Handler chain begins with a \"raw\" Handler – this is a function which takes some request and returns some\n * response. A chain is then created by supplying a series of mapping functions – the ChainableHandler type – which will\n * be called with the `next` Handler in the chain.\n *\n * Ex:\n * ```ts\n * const handler = (request: string, metadata?: RequestMetadata) => Promise.resolve(`Responded to ${request}`)\n * const chainable = (next: Handler<string, string>) => (request: string, metadata?: RequestMetadata) => {\n *   return next(`modified ${request}`, metadata)\n * }\n *\n * const chain = new HandlerChainBuilder(handler)\n *   .map(chainable)\n *   .handler\n *\n * const response = await chain('hello')\n * expect(response).toBe('Responded to modified hello; 0')\n * ```\n * You can largely ignore the `metadata` argument present in the above example. This is the mechanism by which an\n * AbortSignal is passed to each Handler in the chain, but the only real requirement when implementing a Handler is\n * to pass this argument along to the `next` function. In fact, many Handlers will want to be generic over the type\n * of metadata:\n * ```ts\n * const chainable = <Meta>(next: Handler<string, string, Meta>) => (request: string, metadata: Meta) => {\n *   return next(`modified ${request}`, metadata)\n * }\n * ```\n * Actually, it's a very good idea for Handlers to be as generic as possible, since that will allow greater re-use. In\n * the above example, we don't do anything with the response from `next`, so we can let that be generic, too:\n * ```ts\n * const chainable = <Res, Meta>(next: Handler<string, Res, Meta>) => (request: string, metadata: Meta) => {\n *   return next(`modified ${request}`, metadata)\n * }\n * ```\n * Now if some other Handler in the chain decides to return a different response type, our Handler won't require any\n * changes to compile.\n *\n * ---\n *\n * Since execution passes from handler to handler in the chain, and then back, handlers have the opportunity to modify\n * or observe both the request and response. This might be useful for implementing serialization/deserialization, but\n * the simplest example that demonstrates this feature is measuring request latency:\n * ```ts\n * const latencyMeasuringHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) =>\n *   async (req: Req, metadata: Meta) => {\n *     const start = performance.now()\n *     const response = await next(req, metadata)\n *     const latency = performance.now() - start\n *     console.log(`latency for request ${request} was ${latency}`)\n *     return response\n *   }\n * ```\n * Execution is first passed to our measuring handler, which marks the `start` timestamp. Then it passes execution on\n * down the chain. After a response is received (by some handler down the chain), execution passes back up to our\n * handler here, which records the amount of time spent inside `next`.\n *\n * ---\n *\n * Handlers may also abort requests. They can do this in two ways:\n *   1. Create an `AbortController` and add its `AbortSignal` to the `metadata` object when calling `next`.\n *   2. Resolve its returned Promise.\n *\n * The first approach is straightforward, but the second may benefit from an example – the simplest is a handler which\n * will timeout a request:\n * ```ts\n * const timeoutHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) => (req: Req, metadata: Meta) => {\n *   return Promise.race([\n *     next(req, metadata),\n *     sleep(1000),\n *   ])\n * }\n * ```\n * The Promise returned by this handler will resolve either when the `next` handler resolves or 1 second has elapsed,\n * whichever happens first. If the timeout happens first, we want the `next` handler to recieve an abort signal so that\n * it can terminate early (since its result is no longer needed).\n *\n * HandlerChainBuilder makes this happen by observing when each handler completes, and sending an abort signal to all\n * the handlers \"downstream\" from the aborting handler.\n */\nexport class HandlerChainBuilder<Req, Res, Meta extends RequestMetadata> {\n    private readonly inner: Handler<Req, Res, Meta>;\n\n    constructor(inner: (req: Req, metadata: Meta) => Promise<Res>) {\n        // The TS compiler has the following behavior:\n        //\n        // class Infer<T extends SomeType | undefined> { constructor(f: (t?: T) => void) {} }\n        // const f = (t?: SomeType) => {}\n        // const i = new Infer(f)\n        //\n        // The type of `i` is inferred to be `Infer<SomeType>` instead of `Infer<SomeType | undefined>`, even though the\n        // type of `f`'s argument is `SomeType | undefined`. This seems to be a bug in type inference. Note that making\n        // the constructor argument required gives the expected behavior:\n        //\n        // class Infer<T extends SomeType | undefined> { constructor(f: (t: T) => void) {} }\n        // const f = (t?: SomeType) => {}\n        // const i = new Infer(f)\n        //\n        // Now `i` is inferred to be `Infer<SomeType | undefined>`.\n        //\n        // This has consequences if the inferred type T is used elsewhere in the class.\n        //\n        // In this case, we need to make sure that if the given `inner` function marks the metadata argument as\n        // optional, that HandlerChainBuilder correctly infers that the Meta type includes undefined. So we don't mark\n        // metadata as optional, and so we must cast to `Handler` (which does mark it as optional).\n        //\n        // Safety: We're adding `| undefined` to the metadata type, which may be unsafe – `undefined` may not be\n        // assignable to Meta. But when handling the argument of type Meta, we simply pass it through from handler to\n        // handler – we never call `inner` without passing the metadata argument we've received from some call to an\n        // outer handler. The typing visible to callers remains safe.\n        this.inner = inner as Handler<Req, Res, Meta>;\n    }\n\n    get handler(): Handler<Req, Res, Meta> {\n        return this.inner;\n    }\n\n    map<PriorReq, PriorRes>(\n        outer: ChainableHandler<PriorReq, PriorRes, Req, Res, Meta>\n    ): HandlerChainBuilder<PriorReq, PriorRes, Meta> {\n        // To create the next handler in the chain, we compose the \"outer\" handler with the \"inner\" handler.\n        //\n        // The outer handler observes its own completion and sends an abort signal to the inner handler when it has\n        // resolved. To prevent unexpected behavior, the inner handler also observes its own completion, setting a flag\n        // when it resolves so that – if it resolves before the outer handler – the outer handler can skip sending the\n        // abort signal (since the inner handler has already completed).\n        const outerHandler = (req: PriorReq, metadata: Meta): Promise<PriorRes> => {\n            const abort = new AbortController();\n            const signal = abort.signal;\n\n            // It's important to not signal an abort to an inner handler which has already completed – it seems like\n            // this would be a non-issue (shouldn't aborting after completion be a no-op?), but specifically for the\n            // browser's implementation of `fetch`, aborting even after the `fetch` Promise resolves can cause an abort\n            // error if e.g. the Fetch Response's body has not yet been read.\n            //\n            // So, for safety, we will only abort inner handlers which are still executing.\n            let innerCompleted = false;\n\n            const maybeAbort = () => {\n                // Safety: we never give `abort` to anyone else, so we know if the signal is aborted, this function\n                // has already run, so we can return early without fear of leaking. We also know if inner has completed,\n                // it has already performed cleanup.\n                if (signal.aborted || innerCompleted) return;\n\n                // If we've gotten here, the outer handler has either completed, or we heard an abort event while the\n                // inner handler is still executing – so we pass the abort signal down to the inner handler.\n                abort.abort();\n                metadata?.signal?.removeEventListener(\"abort\", maybeAbort);\n            };\n\n            metadata?.signal?.addEventListener(\"abort\", maybeAbort);\n\n            const innerHandler = new Proxy(this.inner, {\n                apply: (target, thisArg, args) => {\n                    const [req, metadata] = args as Parameters<typeof target>;\n\n                    // When calling the inner handler, we may not care about the result and don't want the handler's\n                    // operation to be interrupted by an abort signal. For example, we might be calling the inner\n                    // handler as a side-effect which we want to continue after the outer handler has completed.\n                    //\n                    // A concrete example: returning a value from cache immediately, but then calling the inner handler\n                    // as a side-effect to refresh the cache \"in the background.\"\n                    const innerSignal = metadata?.isSideEffect ? undefined : signal;\n\n                    // To help Handler authors out, we'll do some bookkeeping and cleanup for them – if they forget to\n                    // remove an abort event listener, we'll remove it for them when the Promise they return resolves.\n                    // Note: No need to proxy removeEventListener, since removing a non-existent listener just no-ops.\n                    const abortListeners: EventListenerOrEventListenerObject[] = [];\n                    signal.addEventListener = new Proxy(signal.addEventListener, {\n                        apply: (target, thisArg, args) => {\n                            abortListeners.push(args[1]);\n                            return Reflect.apply(target, thisArg, args);\n                        },\n                    });\n\n                    const cleanupAndMarkComplete = () => {\n                        // The only reason we listen to upstream aborts is to pass them to the inner handler – since the\n                        // inner handler has completed, we no longer need the listener.\n                        metadata?.signal?.removeEventListener(\"abort\", maybeAbort);\n                        abortListeners.forEach((listener) => signal.removeEventListener(\"abort\", listener));\n                        innerCompleted = true;\n                    };\n\n                    const innerResponse: ReturnType<typeof target> = Reflect.apply(target, thisArg, [\n                        req,\n                        { ...metadata, signal: innerSignal },\n                    ]);\n\n                    // Using `finally` is more idiomatic, but causes trouble in some environments (e.g. some testing\n                    // runtimes which detect uncaught rejected promises).\n                    innerResponse.catch(() => {}).then(cleanupAndMarkComplete);\n                    return innerResponse;\n                },\n            });\n\n            const outerResponse = outer(innerHandler)(req, metadata);\n            outerResponse.catch(() => {}).then(maybeAbort);\n            return outerResponse;\n        };\n        return new HandlerChainBuilder(outerHandler as Handler<PriorReq, PriorRes, Meta>);\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"c849b8af5748280c435f7ec287d5b1d3","cacheData":{"env":{}}}