{"id":"node_modules/@snap/camera-kit/lib/persistence/Persistence.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\persistence\\Persistence.js.map","includedInParent":true,"mtime":1689894621021},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidKey = exports.Persistence = void 0;\nconst isValidKey = key => typeof key === \"string\" || typeof key === \"number\";\n/**\n * The abstract Persistence class defines an async interface for interacting with persistent client-side storage. This\n * is modeled as a simple key/value store.\n *\n * Subclasses may be implemented to support a variety of persistence mechanisms – e.g. localStorage, IndexedDB, etc.\n */\nexports.isValidKey = isValidKey;\nclass Persistence {}\nexports.Persistence = Persistence;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":7},"generated":{"line":7,"column":0}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":7,"column":6}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":23},"generated":{"line":7,"column":16}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":27},"generated":{"line":7,"column":19}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":39},"generated":{"line":7,"column":22}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":61},"generated":{"line":7,"column":26}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":68},"generated":{"line":7,"column":33}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":71},"generated":{"line":7,"column":36}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":76},"generated":{"line":7,"column":41}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":84},"generated":{"line":7,"column":49}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":88},"generated":{"line":7,"column":53}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":95},"generated":{"line":7,"column":60}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":98},"generated":{"line":7,"column":63}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":103},"generated":{"line":7,"column":68}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":7,"column":111},"generated":{"line":7,"column":76}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":7}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":8}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":18}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":21}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":14,"column":31}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":15,"column":6},"generated":{"line":15,"column":0}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":15,"column":22},"generated":{"line":15,"column":6}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":15,"column":33},"generated":{"line":15,"column":17}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":15,"column":33},"generated":{"line":15,"column":18}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":0}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":7}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":8}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":19}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":22}},{"source":"../../src/persistence/Persistence.ts","name":null,"original":{"line":32,"column":1},"generated":{"line":16,"column":33}}],"sources":{"../../src/persistence/Persistence.ts":"/**\n * Different persistence mechanisms (e.g. localStorage, IndexedDB) may support different key types. This type should be\n * a valid key across all concrete Persistence implementations.\n */\nexport type ValidKey = string | number;\n\nexport const isValidKey = (key: unknown): key is ValidKey => typeof key === \"string\" || typeof key === \"number\";\n\n/**\n * The abstract Persistence class defines an async interface for interacting with persistent client-side storage. This\n * is modeled as a simple key/value store.\n *\n * Subclasses may be implemented to support a variety of persistence mechanisms – e.g. localStorage, IndexedDB, etc.\n */\nexport abstract class Persistence<T> {\n    abstract size: number;\n\n    abstract retrieve(key: ValidKey): Promise<T | undefined>;\n\n    abstract retrieveAll(): Promise<T[]>;\n\n    abstract remove(key: ValidKey): Promise<void>;\n\n    abstract removeAll(): Promise<T[]>;\n\n    /**\n     * Persistence implementations must be capable of generating unique keys, or accepting a unique key from the\n     * caller.\n     */\n    abstract store(value: T): Promise<ValidKey>;\n    abstract store(key: ValidKey, value: T): Promise<ValidKey>;\n}\n"},"lineCount":null}},"error":null,"hash":"31f3cefdea0c83d44f200533ad73ef68","cacheData":{"env":{}}}