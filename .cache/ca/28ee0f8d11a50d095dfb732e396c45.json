{"id":"node_modules/@snap/camera-kit/lib/common/assertions.js","dependencies":[{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\lib\\common\\assertions.js.map","includedInParent":true,"mtime":1689894620853},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\package.json","includedInParent":true,"mtime":1689971043690},{"name":"C:\\Users\\aesta\\Documents\\GitHub\\VM_POC_V02\\node_modules\\@snap\\camera-kit\\package.json","includedInParent":true,"mtime":1689894620849}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = assert;\nexports.assertUnreachable = assertUnreachable;\n/**\n * Assert a particular code path is unreachable, e.g. to perform a compile-time exhaustiveness check.\n *\n * Ex:\n * ```ts\n * interface A { type: 'a' }\n * interface B { type: 'b' }\n * type TaggedUnion = A | B\n *\n * function exhaustiveSwitch(value: TaggedUnion) {\n *   switch (value.type) {\n *     case 'a': // do something with A\n *     case 'b': // do something with B\n *     // this will fail to compile if we add another type to TaggedUnion and forget to add a corresponding case\n *     // to the switch statement.\n *     default: assertUnreachable(value)\n *   }\n * }\n * ```\n */\nfunction assertUnreachable(_) {\n  throw new Error(\"Reached unreachable code at runtime.\");\n}\n/**\n * Assert that a condition is true. Otherwise, throws an error.\n * @param condition Condition to test.\n * @param error Optional error message or error instance to throw.\n */\nfunction assert(condition, error = \"Assertion failed\") {\n  if (!condition) {\n    if (error instanceof Error) {\n      throw error;\n    } else {\n      throw new Error(error);\n    }\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/common/assertions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":28,"column":0}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":16},"generated":{"line":28,"column":9}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":33},"generated":{"line":28,"column":26}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":34},"generated":{"line":28,"column":27}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":28,"column":28}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":28,"column":30}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":29,"column":2}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":10},"generated":{"line":29,"column":8}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":14},"generated":{"line":29,"column":12}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":29,"column":17}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":20},"generated":{"line":29,"column":18}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":58},"generated":{"line":29,"column":56}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":22,"column":59},"generated":{"line":29,"column":57}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":30,"column":0}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":31,"column":0}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":6},"generated":{"line":36,"column":0}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":16},"generated":{"line":36,"column":9}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":36,"column":15}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":36,"column":16}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":41},"generated":{"line":36,"column":25}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":43},"generated":{"line":36,"column":27}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":43},"generated":{"line":36,"column":32}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":67},"generated":{"line":36,"column":35}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":85},"generated":{"line":36,"column":53}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":30,"column":85},"generated":{"line":36,"column":55}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":37,"column":2}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":31,"column":8},"generated":{"line":37,"column":6}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":31,"column":9},"generated":{"line":37,"column":7}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":31,"column":18},"generated":{"line":37,"column":16}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":31,"column":20},"generated":{"line":37,"column":18}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":38,"column":4}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":12},"generated":{"line":38,"column":8}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":17},"generated":{"line":38,"column":13}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":29},"generated":{"line":38,"column":25}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":34},"generated":{"line":38,"column":30}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":32,"column":36},"generated":{"line":38,"column":32}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":33,"column":12},"generated":{"line":39,"column":6}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":33,"column":18},"generated":{"line":39,"column":12}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":33,"column":23},"generated":{"line":39,"column":17}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":40,"column":5}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":40,"column":11}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":12},"generated":{"line":41,"column":6}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":18},"generated":{"line":41,"column":12}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":22},"generated":{"line":41,"column":16}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":27},"generated":{"line":41,"column":21}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":28},"generated":{"line":41,"column":22}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":33},"generated":{"line":41,"column":27}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":35,"column":34},"generated":{"line":41,"column":28}},{"source":"../../src/common/assertions.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":44,"column":0}}],"sources":{"../../src/common/assertions.ts":"/**\n * Assert a particular code path is unreachable, e.g. to perform a compile-time exhaustiveness check.\n *\n * Ex:\n * ```ts\n * interface A { type: 'a' }\n * interface B { type: 'b' }\n * type TaggedUnion = A | B\n *\n * function exhaustiveSwitch(value: TaggedUnion) {\n *   switch (value.type) {\n *     case 'a': // do something with A\n *     case 'b': // do something with B\n *     // this will fail to compile if we add another type to TaggedUnion and forget to add a corresponding case\n *     // to the switch statement.\n *     default: assertUnreachable(value)\n *   }\n * }\n * ```\n */\nexport function assertUnreachable(_: never): never {\n    throw new Error(\"Reached unreachable code at runtime.\");\n}\n\n/**\n * Assert that a condition is true. Otherwise, throws an error.\n * @param condition Condition to test.\n * @param error Optional error message or error instance to throw.\n */\nexport function assert(condition: boolean, error: string | Error = \"Assertion failed\"): asserts condition {\n    if (!condition) {\n        if (error instanceof Error) {\n            throw error;\n        } else {\n            throw new Error(error);\n        }\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"1b9343c35464f59a07b68596119d57d7","cacheData":{"env":{}}}